<%- include('../partials/admin/header') %>

<!-- Main Content -->
<main class="col-md-10 ms-sm-auto col-lg-10 px-md-4">
  <h1 class="mb-4">Category Management</h1>

  <!-- Add Category Button -->
  <div class="d-flex justify-content-end mb-3">
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
      <i class="bi bi-plus-circle me-2"></i> Add Category
    </button>
  </div>

  <!-- Categories Table -->
  <div class="table-responsive">
    <table class="table table-hover table-bordered mt-3">
      <thead class="table-dark">
        <tr>
          <th scope="col">Category Name</th>
          <th scope="col">Description</th>
          <th scope="col">Status</th>
          <th scope="col">Actions</th>
          <th scope="col">Edit</th>
        </tr>
      </thead>
      <tbody>
        <% categories.forEach(category => { %>
        <tr data-category-id="<%= category._id %>">
          <td class="category-name"><%= category.name %></td>
          <td class="category-description"><%= category.description || 'No description available' %></td>
          <td>
            <span class="badge rounded-pill <%= category.isBlocked ? 'bg-danger' : 'bg-success' %> px-3 py-2" style="font-size: 0.9rem;">
              <i class="bi <%= category.isBlocked ? 'bi-x-circle-fill' : 'bi-check-circle-fill' %>"></i>
              <%= category.isBlocked ? 'Blocked' : 'Active' %>
            </span>
          </td>
          <td>
            <!-- Block/Unblock Button -->
            <button type="button" 
                    class="btn <%= category.isBlocked ? 'btn-success' : 'btn-danger' %> btn-sm block-category-btn" 
                    data-category-id="<%= category._id %>" 
                    data-blocked="<%= category.isBlocked %>">
              <i class="bi <%= category.isBlocked ? 'bi-unlock' : 'bi-lock' %> me-1"></i>
              <%= category.isBlocked ? 'Unblock' : 'Block' %>
            </button>
          </td>
          <td>
            <!-- Edit Button -->
            <button type="button" 
                    class="btn btn-info btn-sm"
                    onclick="openEditModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')">
              <i class="bi bi-pencil-square me-1"></i> Edit
            </button>
          </td>
        </tr>
        <% }); %>
      </tbody>
    </table>
  </div>

  <!-- Pagination Controls -->
  <nav>
    <ul class="pagination justify-content-center">
      <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
        <a class="page-link" href="/admin/categories?page=<%= currentPage - 1 %>">Previous</a>
      </li>

      <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
          <a class="page-link" href="/admin/categories?page=<%= i %>"><%= i %></a>
        </li>
      <% } %>

      <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
        <a class="page-link" href="/admin/categories?page=<%= currentPage + 1 %>">Next</a>
      </li>
    </ul>
  </nav>
</main>

<!-- Add Category Modal -->
<div class="modal fade" id="addCategoryModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="addCategoryForm" onsubmit="return handleAddCategory(event)">
        <div class="modal-body">
          <div class="mb-3">
            <label for="categoryName" class="form-label">Category Name</label>
            <input type="text" class="form-control" id="categoryName" name="name" maxlength="20" required>
            <div class="form-text">Maximum 20 characters allowed</div>
            <div class="invalid-feedback" id="categoryNameError"></div>
          </div>
          <div class="mb-3">
            <label for="categoryDescription" class="form-label">Description</label>
            <textarea class="form-control" id="categoryDescription" name="description" rows="3"></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Add Category</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Category Modal -->
<div class="modal fade" id="editCategoryModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="editCategoryForm" onsubmit="return handleEditCategory(event)">
        <input type="hidden" id="editCategoryId" name="categoryId">
        <div class="modal-body">
          <div class="mb-3">
            <label for="editCategoryName" class="form-label">Category Name</label>
            <input type="text" class="form-control" id="editCategoryName" name="name" maxlength="20" required>
            <div class="form-text">Maximum 20 characters allowed</div>
            <div class="invalid-feedback" id="editCategoryNameError"></div>
          </div>
          <div class="mb-3">
            <label for="editCategoryDescription" class="form-label">Description</label>
            <textarea class="form-control" id="editCategoryDescription" name="description" rows="3"></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Add SweetAlert2 and required scripts -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  /* Table styles */
  .table {
    background-color: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .table thead th {
    background-color: #343a40;
    color: white;
    font-weight: 500;
    text-align: center;
    vertical-align: middle;
    border-bottom: 2px solid #454d55;
  }

  .table td {
    vertical-align: middle;
    text-align: center;
  }

  /* Button styles */
  .btn-info {
    background-color: #17a2b8;
    border-color: #17a2b8;
    color: white;
  }

  .btn-info:hover {
    background-color: #138496;
    border-color: #117a8b;
    color: white;
  }

  /* Status badge styles */
  .badge {
    font-weight: 500;
    letter-spacing: 0.3px;
  }

  .badge i {
    margin-right: 4px;
  }

  /* Category name and description styles */
  .category-name {
    font-weight: 500;
  }

  .category-description {
    color: #6c757d;
    max-width: 300px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  /* Action buttons container */
  .btn-sm {
    padding: 0.4rem 0.8rem;
    font-size: 0.875rem;
  }

  /* Responsive table */
  @media (max-width: 768px) {
    .table td, .table th {
      padding: 0.5rem;
    }

    .btn-sm {
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
    }

    .category-description {
      max-width: 150px;
    }
  }
</style>

<script>
// Function to escape HTML special characters
function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

// Function to safely set text content
function setTextContent(element, text) {
    element.textContent = text || '';
}

// Open Edit Modal
function openEditModal(categoryId, name, description) {
    document.getElementById('editCategoryId').value = categoryId;
    document.getElementById('editCategoryName').value = name;
    document.getElementById('editCategoryDescription').value = description || '';
    new bootstrap.Modal(document.getElementById('editCategoryModal')).show();
}

// Validate category name length
function validateCategoryName(name, errorElementId) {
    const errorElement = document.getElementById(errorElementId);
    const inputElement = errorElementId === 'categoryNameError' ? 
        document.getElementById('categoryName') : 
        document.getElementById('editCategoryName');
    
    if (name.length > 20) {
        errorElement.textContent = 'Category name cannot exceed 20 characters';
        inputElement.classList.add('is-invalid');
        return false;
    } else if (name.length === 0) {
        errorElement.textContent = 'Category name is required';
        inputElement.classList.add('is-invalid');
        return false;
    } else {
        errorElement.textContent = '';
        inputElement.classList.remove('is-invalid');
        return true;
    }
}

// Handle Add Category
async function handleAddCategory(event) {
    event.preventDefault();
    
    try {
        const formData = new FormData(event.target);
        const name = formData.get('name').trim();
        const description = formData.get('description');

        // Validate category name
        if (!validateCategoryName(name, 'categoryNameError')) {
            return false;
        }

        // Show loading state
        Swal.fire({
            title: 'Adding Category...',
            html: 'Please wait...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch('/admin/categories/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name, description })
        });

        const data = await response.json();
        
        if (data.success) {
            // Close the modal
            bootstrap.Modal.getInstance(document.getElementById('addCategoryModal')).hide();
            
            // Show success message with a nice animation
            await Swal.fire({
                icon: 'success',
                title: 'Category Added!',
                text: data.message,
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });
            
            window.location.reload();
        } else {
            throw new Error(data.message || 'Failed to add category');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Something went wrong!',
            confirmButtonColor: '#3085d6'
        });
    }
}

// Toggle Category Block/Unblock
document.querySelectorAll('.block-category-btn').forEach(btn => {
  btn.addEventListener('click', async function() {
    const categoryId = this.dataset.categoryId;
    const isBlocked = this.dataset.blocked === 'true';
    const action = isBlocked ? 'unblock' : 'block';
    const confirmText = isBlocked ? 'Unblock' : 'Block';
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: `Do you want to ${confirmText.toLowerCase()} this category?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: `Yes, ${confirmText}`
    });
    if (result.isConfirmed) {
      try {
        const response = await fetch(`/admin/categories/status/${categoryId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        if (response.status === 401) {
          // Not authenticated as admin
          await Swal.fire({
            icon: 'error',
            title: 'Session Expired',
            text: 'Your admin session has expired. Please log in again.',
            confirmButtonText: 'Go to Login',
            allowOutsideClick: false
          });
          window.location.href = '/admin/login';
          return;
        }
        const data = await response.json();
        if (data.success) {
          await Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: `Category ${data.isBlocked ? 'blocked' : 'unblocked'} successfully`,
            showConfirmButton: false,
            timer: 1500
          });
          window.location.reload();
        } else {
          throw new Error(data.message || `Failed to ${action} category`);
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: error.message || 'An error occurred'
        });
      }
    }
  });
});

// Handle Edit Category
async function handleEditCategory(event) {
  event.preventDefault();
  
  try {
    const formData = new FormData(event.target);
    const categoryId = document.getElementById('editCategoryId').value;
    const name = formData.get('name').trim();
    const description = formData.get('description');

    // Validate category name
    if (!validateCategoryName(name, 'editCategoryNameError')) {
      return false;
    }

    // Show loading state
    Swal.fire({
      title: 'Updating Category...',
      html: 'Please wait while we save your changes...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    const response = await fetch(`/admin/categories/edit/${categoryId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ name, description })
    });

    const data = await response.json();
    
    if (data.success) {
      // Update UI without reload
      const row = document.querySelector(`tr[data-category-id="${categoryId}"]`);
      if (row) {
        const nameCell = row.querySelector('.category-name');
        const descCell = row.querySelector('.category-description');
        
        if (nameCell) setTextContent(nameCell, name);
        if (descCell) setTextContent(descCell, description || 'No description available');
      }
      
      // Close the modal
      bootstrap.Modal.getInstance(document.getElementById('editCategoryModal')).hide();
      
      // Show success message
      await Swal.fire({
        icon: 'success',
        title: 'Category Updated!',
        text: data.message,
        showConfirmButton: false,
        timer: 1500,
        timerProgressBar: true
      });
    } else {
      throw new Error(data.message || 'Failed to update category');
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: error.message || 'Something went wrong!',
      confirmButtonColor: '#3085d6'
    });
  }
}

// Add real-time validation event listeners
document.addEventListener('DOMContentLoaded', function() {
  // Add category name validation
  const categoryNameInput = document.getElementById('categoryName');
  const editCategoryNameInput = document.getElementById('editCategoryName');
  
  // Real-time validation for Add Category
  categoryNameInput.addEventListener('input', function() {
    const name = this.value.trim();
    validateCategoryName(name, 'categoryNameError');
    
    // Show character count
    const remaining = 20 - name.length;
    const formText = this.parentElement.querySelector('.form-text');
    if (remaining < 5) {
      formText.textContent = `${remaining} characters remaining`;
      formText.style.color = remaining === 0 ? '#dc3545' : '#fd7e14';
    } else {
      formText.textContent = 'Maximum 20 characters allowed';
      formText.style.color = '#6c757d';
    }
  });
  
  // Real-time validation for Edit Category
  editCategoryNameInput.addEventListener('input', function() {
    const name = this.value.trim();
    validateCategoryName(name, 'editCategoryNameError');
    
    // Show character count
    const remaining = 20 - name.length;
    const formText = this.parentElement.querySelector('.form-text');
    if (remaining < 5) {
      formText.textContent = `${remaining} characters remaining`;
      formText.style.color = remaining === 0 ? '#dc3545' : '#fd7e14';
    } else {
      formText.textContent = 'Maximum 20 characters allowed';
      formText.style.color = '#6c757d';
    }
  });
  
  // Clear validation when modals are closed
  document.getElementById('addCategoryModal').addEventListener('hidden.bs.modal', function() {
    document.getElementById('categoryName').classList.remove('is-invalid');
    document.getElementById('categoryNameError').textContent = '';
    document.getElementById('addCategoryForm').reset();
    const formText = document.querySelector('#addCategoryModal .form-text');
    formText.textContent = 'Maximum 20 characters allowed';
    formText.style.color = '#6c757d';
  });
  
  document.getElementById('editCategoryModal').addEventListener('hidden.bs.modal', function() {
    document.getElementById('editCategoryName').classList.remove('is-invalid');
    document.getElementById('editCategoryNameError').textContent = '';
    const formText = document.querySelector('#editCategoryModal .form-text');
    formText.textContent = 'Maximum 20 characters allowed';
    formText.style.color = '#6c757d';
  });
});
</script>

<%- include('../partials/admin/footer') %>