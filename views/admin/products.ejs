<%- include('../partials/admin/header') %>

<!-- Main Content -->
<main class="col-md-10 ms-sm-auto col-lg-10 px-md-4">
  <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
    <h1 class="mb-3 mb-md-0">Products List</h1>
    <a href="/admin/products/add" class="btn btn-primary mb-3 mb-md-0">
      <i class="bi bi-plus-circle"></i> Add Product
    </a>
  </div>
  
  <!-- Products Table -->
  <div class="table-responsive">
    <table class="table table-hover table-bordered mt-3">
      <thead class="table-dark">
        <tr>
          <th scope="col">Product Name</th>
          <th scope="col">Category</th>
          <th scope="col">Regular Price</th>
          <th scope="col">Sales Price</th>
          <th scope="col">Quantity</th>
          <th scope="col">Created At</th>
          <th scope="col">Status</th>
          <th scope="col">Actions</th>
        </tr>
      </thead>
      
      <tbody>
        <% if (products && products.length > 0) { %>
          <% products.forEach(product => { %>
            <tr>
              <td><%= product.name ? product.name.replace(/[<>]/g, '') : 'N/A' %></td>
              <td><%= product.category ? product.category.name : 'N/A' %></td>
              <td>₹<%= product.regularPrice ? product.regularPrice.toLocaleString('en-IN') : 'N/A' %></td>
              <td>₹<%= product.salesPrice ? product.salesPrice.toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= product.quantity || 0 %></td>
              <td><%= product.createdAt ? new Date(product.createdAt).toLocaleDateString('en-IN') : 'N/A' %></td>
              <td class="text-center">
                <span class="badge bg-<%= product.isBlocked ? 'danger' : 'success' %>">
                  <%= product.isBlocked ? 'Blocked' : 'Active' %>
                </span>
              </td>
              <td class="text-center">
                <button onclick="handleBlockAction(this, '<%- product._id %>', <%= product.isBlocked %>)" 
                        class="btn btn-sm <%= product.isBlocked ? 'btn-success' : 'btn-danger' %> me-2">
                  <i class="bi <%= product.isBlocked ? 'bi-unlock' : 'bi-lock' %>"></i>
                  <%= product.isBlocked ? 'Unblock' : 'Block' %>
                </button>
                <a href="/admin/products/edit/<%= product._id %>" class="btn btn-sm btn-info">
                  <i class="bi bi-pencil"></i> Edit
                </a>
              </td>
            </tr>
          <% }); %>
        <% } else { %>
          <tr>
            <td colspan="8" class="text-center py-4">
              <div class="text-muted">
                <i class="bi bi-box-seam display-6 d-block mb-2"></i>
                No products found
              </div>
            </td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>

  <!-- Empty State (when no products) -->
  <% if (!products || products.length === 0) { %>
    <div class="text-center py-5">
      <i class="bi bi-box-seam display-1 text-muted mb-3"></i>
      <h4>No products found</h4>
      <p class="text-muted">Add your first product to get started</p>
      <a href="/admin/products/add" class="btn btn-primary mt-2">
        <i class="bi bi-plus-circle"></i> Add Product
      </a>
    </div>
  <% } %>

  <!-- Pagination -->
  <% if (totalPages && totalPages > 1) { %>
    <div class="d-flex justify-content-between align-items-center mt-3">
      <div class="text-muted">
        Showing <%= (currentPage - 1) * limit + 1 %> to 
        <%= Math.min(currentPage * limit, totalItems || 0) %> of 
        <%= totalItems || 0 %> entries
      </div>
      
      <nav>
        <ul class="pagination mb-0">
          <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
            <a class="page-link" href="/admin/products?page=<%= currentPage - 1 %>" aria-label="Previous">
              <span aria-hidden="true">&laquo; Previous</span>
            </a>
          </li>
          
          <% 
            const maxPagesToShow = 5; 
            let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
            let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
            
            if (endPage - startPage + 1 < maxPagesToShow) {
              startPage = Math.max(1, endPage - maxPagesToShow + 1);
            }
          %>
          
          <% if (startPage > 1) { %>
            <li class="page-item">
              <a class="page-link" href="/admin/products?page=1">1</a>
            </li>
            <% if (startPage > 2) { %>
              <li class="page-item disabled"><span class="page-link">...</span></li>
            <% } %>
          <% } %>
          
          <% for (let i = startPage; i <= endPage; i++) { %>
            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
              <a class="page-link" href="/admin/products?page=<%= i %>"><%= i %></a>
            </li>
          <% } %>
          
          <% if (endPage < totalPages) { %>
            <% if (endPage < totalPages - 1) { %>
              <li class="page-item disabled"><span class="page-link">...</span></li>
            <% } %>
            <li class="page-item">
              <a class="page-link" href="/admin/products?page=<%= totalPages %>"><%= totalPages %></a>
            </li>
          <% } %>
          
          <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
            <a class="page-link" href="/admin/products?page=<%= currentPage + 1 %>" aria-label="Next">
              <span aria-hidden="true">Next &raquo;</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  <% } %>
</main>

<%- include('../partials/admin/footer') %>

<!-- Add SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Custom Scripts -->
<script>
  async function handleBlockAction(button, productId, isBlocked) {
    const originalHTML = button.innerHTML;
    const action = isBlocked ? 'unblock' : 'block';
    
    try {
      // Show confirmation dialog
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to ${action} this product?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: `Yes, ${action} it!`,
        cancelButtonText: 'Cancel',
        reverseButtons: true
      });

      if (!result.isConfirmed) return;

      // Show loading state
      button.disabled = true;
      button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
      
      // Make the API call
      const response = await fetch(`/admin/products/toggle-block/${productId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin'
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        // Update button appearance
        const newStatus = !isBlocked;
        button.className = `btn btn-sm ${newStatus ? 'btn-success' : 'btn-danger'} me-2`;
        button.innerHTML = `
          <i class="bi ${newStatus ? 'bi-unlock' : 'bi-lock'}"></i>
          ${newStatus ? 'Unblock' : 'Block'}
        `;
        
        // Update the status badge in the same row
        const statusBadge = button.closest('tr').querySelector('.badge');
        if (statusBadge) {
          statusBadge.className = `badge bg-${newStatus ? 'danger' : 'success'}`;
          statusBadge.textContent = newStatus ? 'Blocked' : 'Active';
        }
        
        // Show success message
        await Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: data.message || 'Product status updated successfully',
          showConfirmButton: false,
          timer: 1500
        });
        
        // Update the onclick handler with the new status
        button.setAttribute('onclick', `handleBlockAction(this, '${productId}', ${newStatus})`);
      } else {
        throw new Error(data.message || 'Failed to update product status');
      }
    } catch (error) {
      await Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to update product status. Please try again.',
        confirmButtonText: 'OK'
      });
    } finally {
      // Restore button state
      button.disabled = false;
      button.innerHTML = originalHTML;
    }
  }
</script>