<%- include('../../views/partials/admin/header') %>

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  .preview-grid {
    display: flex;
    justify-content: space-between;
    gap: 15px;
    margin-top: 15px;
    width: 100%;
  }
  .preview-box {
    position: relative;
    width: calc(25% - 12px);
    aspect-ratio: 1;
    border: 2px dashed #ccc;
    border-radius: 8px;
    overflow: hidden;
    background: #ffffff;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  .preview-box:hover {
    border-color: #007bff;
  }
  .preview-box img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    background: #ffffff;
    display: block;
  }
  .preview-box.empty {
    display: flex;
    align-items: center;
    justify-content: center;
    background: #ffffff;
  }
  .add-icon {
    font-size: 2rem;
    color: #ccc;
  }
  .delete-btn {
    position: absolute;
    top: 5px;
    right: 5px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: rgba(220, 53, 69, 0.9);
    color: white;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    line-height: 1;
    z-index: 100;
    transition: all 0.2s ease;
    font-weight: bold;
    box-shadow: 0 1px 3px rgba(0,0,0,0.3);
  }
  .delete-btn:hover {
    background: #dc3545;
    transform: scale(1.05);
  }
  /* Enhanced Cropper Styles */
  .modal-dialog.modal-lg {
    max-width: 600px;
  }
  .modal-content {
    background-color: #ffffff;
    border: none;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  .modal-header {
    background-color: #ffffff;
    border-bottom: 1px solid #e9ecef;
    border-radius: 12px 12px 0 0;
    padding: 15px 20px;
  }
  .modal-header .modal-title {
    color: #333;
    font-size: 1.2rem;
    font-weight: 500;
  }
  .modal-header .btn-close {
    color: #333;
  }
  .modal-body {
    background-color: #ffffff;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  .img-container {
    background: #f8f9fa;
    border-radius: 8px;
    overflow: hidden;
    height: 350px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid #e9ecef;
  }
  .cropper-toolbar {
    display: flex;
    gap: 10px;
    justify-content: center;
    padding: 10px 0;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e9ecef;
  }
  .cropper-toolbar button {
    background: #ffffff;
    border: 1px solid #dee2e6;
    color: #333;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s;
  }
  .cropper-toolbar button:hover {
    background: #f8f9fa;
    border-color: #adb5bd;
  }
  .cropper-toolbar button.active {
    background: #e9ecef;
    border-color: #adb5bd;
    color: #333;
  }
  .cropper-info {
    color: #333;
    font-size: 14px;
    text-align: center;
  }
  .modal-footer {
    background-color: #ffffff;
    border-top: 1px solid #e9ecef;
    border-radius: 0 0 12px 12px;
    padding: 15px 20px;
    gap: 10px;
  }
  .cropper-view-box {
    outline: 2px solid #fff !important;
    border: none !important;
    background: transparent !important;
  }
  .cropper-face {
    background-color: transparent !important;
    opacity: 0.1 !important;
  }
  .cropper-modal {
    opacity: 0.5 !important;
    background-color: #000 !important;
  }
  .cropper-view-box img {
    opacity: 1 !important;
  }
  .cropper-container {
    background-color: transparent !important;
  }
  .cropper-center::before,
  .cropper-center::after {
    background-color: rgba(255, 255, 255, 0.9) !important;
  }
  .cropper-line {
    background-color: #fff !important;
    opacity: 0.8 !important;
  }
  .cropper-point {
    background-color: #fff !important;
    opacity: 0.8 !important;
  }
  .cropper-dashed {
    border: 1px dashed rgba(255, 255, 255, 0.8) !important;
  }
  .cropper-crop-box {
    border: 2px solid #fff !important;
  }


  /* Ensure placeholder boxes maintain square shape */
  .preview-box::before {
    content: "";
    display: block;
    padding-top: 100%;
  }

  .preview-box > img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  /* Add shadow to images */
  .preview-box img.preview-image {
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
</style>

<main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
  <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Edit Product</h1>
    <a href="/admin/products" class="btn btn-secondary">
      <i class="bi bi-arrow-left"></i> Back to Products
    </a>
  </div>

  <form id="editProductForm" action="/admin/products/edit/<%= product._id %>" method="POST" enctype="multipart/form-data" autocomplete="off">
    <input type="hidden" name="productId" value="<%= product._id %>">
    <input type="file" id="hiddenImageInput" name="images" accept="image/*" style="display:none;" multiple>
    
    <div class="mb-3">
      <label for="productName" class="form-label">Product Name</label>
      <input type="text" class="form-control" id="productName" name="productName" value="<%= product.name %>" required>
    </div>

    <div class="mb-3">
      <label for="category" class="form-label">Category</label>
      <select class="form-select" id="category" name="category" required>
        <option value="">-- Select Category --</option>
        <% categories.forEach(category => { %>
          <option value="<%= category._id %>" 
            <%= (product.category && product.category._id && category._id.toString() === product.category._id.toString()) || 
                (product.category && category._id.toString() === product.category.toString()) ? 'selected' : '' %>>
            <%= category.name %>
          </option>
        <% }); %>
      </select>
    </div>

    <div class="mb-3">
      <label for="dietaryType" class="form-label">Dietary Type</label>
      <select class="form-select" id="dietaryType" name="dietaryType" required>
        <option value="veg" <%= product.dietaryType === 'veg' ? 'selected' : '' %>>Vegetarian</option>
        <option value="nonveg" <%= product.dietaryType === 'nonveg' ? 'selected' : '' %>>Non-Vegetarian</option>
        <option value="vegan" <%= product.dietaryType === 'vegan' ? 'selected' : '' %>>Vegan</option>
      </select>
    </div>

    <div class="mb-3">
      <label for="regularPrice" class="form-label">Regular Price</label>
      <input type="number" class="form-control" id="regularPrice" name="regularPrice" value="<%= product.regularPrice %>" required min="0">
    </div>

    <div class="mb-3">
      <label for="salesPrice" class="form-label">Sales Price</label>
      <input type="number" class="form-control" id="salesPrice" name="salesPrice" value="<%= product.salesPrice %>" required min="0">
    </div>

    <div class="mb-3">
      <label for="quantity" class="form-label">Quantity</label>
      <input type="number" class="form-control" id="quantity" name="quantity" value="<%= product.quantity %>" required min="0">
    </div>

    <div class="mb-3">
      <label for="description" class="form-label">Description</label>
      <textarea class="form-control" id="description" name="description" rows="3" required><%= product.description %></textarea>
    </div>

   <div class="mb-3">
     <label class="form-label">Product Images</label>
     <div class="preview-grid" id="imagePreview">
       <% for(let i = 0; i < 4; i++) { %>
         <div class="preview-box <%= (product && product.productImage && product.productImage[i]) ? '' : 'empty' %>" data-index="<%= i %>" onclick="triggerFileInput(<%= i %>)">
           <% if (product && product.productImage && product.productImage[i]) { %>
             <img src="<%= product.productImage[i] %>" 
                  alt="Product Image <%= i + 1 %>" 
                  style="background: #ffffff;"
                  onerror="this.onerror=null; this.src='/images/default-product.jpg';">
             <button type="button" class="delete-btn" onclick="event.stopPropagation(); deleteImage(<%= i %>)">&times;</button>
             <input type="hidden" name="existingImages[]" value="<%= product.productImage[i] %>">
           <% } else { %>
             <span class="add-icon">+</span>
           <% } %>
         </div>
       <% } %>
     </div>
     <input type="file" class="form-control" id="productImages" accept="image/*" style="position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); border: 0;">
     <div class="text-muted small mt-2">
       <i class="fas fa-info-circle me-1"></i>
       Click on a box to add an image. Maximum 4 images allowed. Each image should be less than 5MB.
     </div>
   </div>

    <div class="mb-3">
      <button type="submit" class="btn btn-primary">Update Product</button>
      <a href="/admin/products" class="btn btn-secondary">Cancel</a>
    </div>
  </form>
</main>

<!-- Cropper Modal -->
<div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="cropperModalLabel">Image Editor</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="cropper-toolbar">
          <button type="button" id="moveButton" title="Move Mode"><i class="fas fa-arrows-alt"></i> Move</button>
          <button type="button" id="cropButton" title="Crop Mode"><i class="fas fa-crop-alt"></i> Crop</button>
          <button type="button" id="zoomInButton" title="Zoom In"><i class="fas fa-search-plus"></i></button>
          <button type="button" id="zoomOutButton" title="Zoom Out"><i class="fas fa-search-minus"></i></button>
          <button type="button" id="rotateLeftButton" title="Rotate Left"><i class="fas fa-undo"></i></button>
          <button type="button" id="rotateRightButton" title="Rotate Right"><i class="fas fa-redo"></i></button>
          <button type="button" id="flipHorizontalButton" title="Flip Horizontal"><i class="fas fa-arrows-alt-h"></i></button>
          <button type="button" id="flipVerticalButton" title="Flip Vertical"><i class="fas fa-arrows-alt-v"></i></button>
          <button type="button" id="resetButton" title="Reset"><i class="fas fa-sync-alt"></i></button>
        </div>
        <div class="img-container">
          <img id="cropperImage" src="" alt="Picture">
        </div>
        <div class="cropper-info">
          Size: <span id="cropperSize">0 x 0</span> px
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveCropButton">Apply Crop</button>
      </div>
    </div>
  </div>
</div>

<script>
  let croppedImages = [];
  let currentBoxIndex = 0;
  let cropper = null;
  const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));

  // Initialize existing images in croppedImages array
  <% if (product && product.productImage) { %>
    <% for(let i = 0; i < 4; i++) { %>
      <% if (product.productImage[i]) { %>
        croppedImages[<%= i %>] = '<%= product.productImage[i] %>';
      <% } %>
    <% } %>
  <% } %>

  // Validate image filename
  function validateImageFilename(filename) {
    // Remove extension for validation
    const nameWithoutExt = filename.replace(/\.[^/.]+$/, '');
    
    // Check if starts with number
    if (/^\d/.test(nameWithoutExt)) {
      return { valid: false, message: 'Image filename cannot start with a number' };
    }
    
    // Check for symbols (only allow letters, numbers, hyphens, underscores)
    if (!/^[a-zA-Z][a-zA-Z0-9_-]*$/.test(nameWithoutExt)) {
      return { valid: false, message: 'Image filename can only contain letters, numbers, hyphens, and underscores, and must start with a letter' };
    }
    
    return { valid: true };
  }

  // Validate product name for duplicates (excluding current product)
  async function validateProductName(name, currentProductId) {
    try {
      const response = await fetch(`/admin/products/check-name?name=${encodeURIComponent(name)}&excludeId=${currentProductId}`);
      const data = await response.json();
      return !data.exists;
    } catch (error) {
      console.error('Error checking product name:', error);
      return false;
    }
  }

  // Validate form fields
  function validateForm() {
    const productName = document.getElementById('productName').value.trim();
    const category = document.getElementById('category').value;
    const dietaryType = document.getElementById('dietaryType').value;
    const regularPrice = parseFloat(document.getElementById('regularPrice').value);
    const salesPrice = parseFloat(document.getElementById('salesPrice').value);
    const quantity = parseInt(document.getElementById('quantity').value);
    const description = document.getElementById('description').value.trim();

    // Product Name validation
    if (!productName) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Product Name',
        text: 'Please enter a product name'
      });
      return false;
    }

    if (productName.length < 3) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Product Name',
        text: 'Product name must be at least 3 characters long'
      });
      return false;
    }

    // Category validation
    if (!category) {
      Swal.fire({
        icon: 'error',
        title: 'Category Required',
        text: 'Please select a category'
      });
      return false;
    }

    // Dietary Type validation
    if (!dietaryType) {
      Swal.fire({
        icon: 'error',
        title: 'Dietary Type Required',
        text: 'Please select a dietary type'
      });
      return false;
    }

    // Price validation
    if (isNaN(regularPrice) || regularPrice <= 0) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Regular Price',
        text: 'Please enter a valid regular price greater than 0'
      });
      return false;
    }

    if (isNaN(salesPrice) || salesPrice <= 0) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Sales Price',
        text: 'Please enter a valid sales price greater than 0'
      });
      return false;
    }

    if (salesPrice >= regularPrice) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Price',
        text: 'Sales price must be less than regular price'
      });
      return false;
    }

    // Quantity validation
    if (isNaN(quantity) || quantity < 0) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Quantity',
        text: 'Please enter a valid quantity (0 or greater)'
      });
      return false;
    }

    // Description validation
    if (!description) {
      Swal.fire({
        icon: 'error',
        title: 'Description Required',
        text: 'Please enter a product description'
      });
      return false;
    }

    if (description.length < 10) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Description',
        text: 'Description must be at least 10 characters long'
      });
      return false;
    }

    return true;
  }

  function updateCropperInfo() {
    if (!cropper) return;
    const data = cropper.getCropBoxData();
    document.getElementById('cropperSize').textContent = 
      Math.round(data.width) + ' x ' + Math.round(data.height);
  }

  function initCropper(image) {
    cropper = new Cropper(image, {
      aspectRatio: NaN,
      viewMode: 1,
      dragMode: 'crop',
      autoCropArea: 0.8,
      restore: false,
      modal: true,
      guides: true,
      center: true,
      highlight: false,
      cropBoxMovable: true,
      cropBoxResizable: true,
      toggleDragModeOnDblclick: false,
      background: false,
      minContainerWidth: 300,
      minContainerHeight: 300,
      ready: function() {
        updateCropperInfo();
      },
      cropend: function() {
        updateCropperInfo();
      }
    });

    // Toolbar button handlers
    document.getElementById('moveButton').addEventListener('click', function() {
      cropper.setDragMode('move');
      this.classList.add('active');
      document.getElementById('cropButton').classList.remove('active');
    });

    document.getElementById('cropButton').addEventListener('click', function() {
      cropper.setDragMode('crop');
      this.classList.add('active');
      document.getElementById('moveButton').classList.remove('active');
    });

    document.getElementById('zoomInButton').addEventListener('click', function() {
      cropper.zoom(0.1);
    });

    document.getElementById('zoomOutButton').addEventListener('click', function() {
      cropper.zoom(-0.1);
    });

    document.getElementById('rotateLeftButton').addEventListener('click', function() {
      cropper.rotate(-90);
    });

    document.getElementById('rotateRightButton').addEventListener('click', function() {
      cropper.rotate(90);
    });

    document.getElementById('flipHorizontalButton').addEventListener('click', function() {
      cropper.scaleX(cropper.getData().scaleX * -1);
    });

    document.getElementById('flipVerticalButton').addEventListener('click', function() {
      cropper.scaleY(cropper.getData().scaleY * -1);
    });

    document.getElementById('resetButton').addEventListener('click', function() {
      cropper.reset();
    });
  }

  function triggerFileInput(index) {
    currentBoxIndex = index;
    document.getElementById('productImages').click();
  }

  document.getElementById('productImages').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (!file) return;
    if (!file.type.startsWith('image/')) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid File Type',
        text: 'Only image files are allowed'
      });
      this.value = '';
      return;
    }
    
    // Validate image filename
    const filenameValidation = validateImageFilename(file.name);
    if (!filenameValidation.valid) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Image Filename',
        text: filenameValidation.message
      });
      this.value = '';
      return;
    }
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const cropperImage = document.getElementById('cropperImage');
        cropperImage.src = e.target.result;
        
        cropperModal.show();
        
        document.getElementById('cropperModal').addEventListener('shown.bs.modal', function() {
          if (cropper) {
            cropper.destroy();
          }
          initCropper(cropperImage);
          document.getElementById('cropButton').classList.add('active');
        }, { once: true });
      };
      reader.readAsDataURL(file);
    }
    this.value = '';
  });

  document.getElementById('saveCropButton').addEventListener('click', function() {
    if (!cropper) return;

    const cropBoxData = cropper.getCropBoxData();
    const width = Math.round(cropBoxData.width);
    const height = Math.round(cropBoxData.height);

    const croppedCanvas = cropper.getCroppedCanvas({
      width: width,
      height: height,
      imageSmoothingEnabled: true,
      imageSmoothingQuality: 'high',
      fillColor: '#ffffff',
      background: '#ffffff'
    });

    const croppedImage = croppedCanvas.toDataURL('image/jpeg', 1.0);
    croppedImages[currentBoxIndex] = croppedImage;
    updateImagePreview();

    cropperModal.hide();
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
  });

  document.getElementById('cropperModal').addEventListener('hidden.bs.modal', function() {
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
  });

  function updateImagePreview() {
    const boxes = document.querySelectorAll('.preview-box');
    
    boxes.forEach((box, index) => {
      if (croppedImages[index]) {
        box.className = 'preview-box';
        box.style.background = '#ffffff';
        box.innerHTML = `
          <img src="${croppedImages[index]}" alt="Product Image ${index + 1}" style="background: #ffffff;">
          <button type="button" class="delete-btn" onclick="event.stopPropagation(); deleteImage(${index})">&times;</button>
        `;
        const img = box.querySelector('img');
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        img.style.background = '#ffffff';
      } else {
        box.className = 'preview-box empty';
        box.style.background = '#ffffff';
        box.innerHTML = '<span class="add-icon">+</span>';
      }
    });
  }

  function deleteImage(index) {
    croppedImages[index] = null;
    updateImagePreview();
  }

  // Real-time validation as user types
  document.getElementById('productName').addEventListener('input', function() {
    const value = this.value.trim();
    if (value.length < 3) {
      this.classList.add('is-invalid');
    } else {
      this.classList.remove('is-invalid');
    }
  });

  document.getElementById('regularPrice').addEventListener('input', function() {
    const salesPrice = parseFloat(document.getElementById('salesPrice').value);
    const regularPrice = parseFloat(this.value);
    
    if (salesPrice >= regularPrice) {
      this.classList.add('is-invalid');
      document.getElementById('salesPrice').classList.add('is-invalid');
    } else {
      this.classList.remove('is-invalid');
      document.getElementById('salesPrice').classList.remove('is-invalid');
    }
  });

  document.getElementById('salesPrice').addEventListener('input', function() {
    const regularPrice = parseFloat(document.getElementById('regularPrice').value);
    const salesPrice = parseFloat(this.value);
    
    if (salesPrice >= regularPrice) {
      this.classList.add('is-invalid');
      document.getElementById('regularPrice').classList.add('is-invalid');
    } else {
      this.classList.remove('is-invalid');
      document.getElementById('regularPrice').classList.remove('is-invalid');
    }
  });

  document.getElementById('editProductForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    // First validate all fields
    if (!validateForm()) {
      return;
    }

    const productName = document.getElementById('productName').value.trim();
    const currentProductId = document.querySelector('input[name="productId"]').value;
    
    // Check for duplicate product name (excluding current product)
    const isNameValid = await validateProductName(productName, currentProductId);
    if (!isNameValid) {
      Swal.fire({
        icon: 'error',
        title: 'Duplicate Product Name',
        text: 'A product with this name already exists. Please choose a different name.'
      });
      return;
    }

    // Show loading state
    Swal.fire({
      title: 'Updating Product',
      text: 'Please wait...',
      allowOutsideClick: false,
      showConfirmButton: false,
      willOpen: () => {
        Swal.showLoading();
      }
    });

    const formData = new FormData();
    
    // Add form fields
    formData.append('productId', document.querySelector('input[name="productId"]').value);
    formData.append('productName', document.getElementById('productName').value);
    formData.append('category', document.getElementById('category').value);
    formData.append('dietaryType', document.getElementById('dietaryType').value);
    formData.append('regularPrice', document.getElementById('regularPrice').value);
    formData.append('salesPrice', document.getElementById('salesPrice').value);
    formData.append('quantity', document.getElementById('quantity').value);
    formData.append('description', document.getElementById('description').value);

    // Add images
    const imagePromises = croppedImages.map(async (imageData, index) => {
      if (imageData) {
        if (imageData.startsWith('data:')) {
          // New cropped image
          try {
            const base64Response = await fetch(imageData);
            const blob = await base64Response.blob();
            const file = new File([blob], `image${index + 1}.jpg`, { type: 'image/jpeg' });
            formData.append('images', file);
          } catch (error) {
            console.error(`Error processing image ${index + 1}:`, error);
          }
        } else {
          // Existing image URL
          formData.append('existingImages[]', imageData);
        }
      }
    });

    try {
      await Promise.all(imagePromises);

      const response = await fetch(this.action, {
        method: 'POST',
        body: formData
      });

      if (response.ok) {
        Swal.fire({
          title: 'Success!',
          text: 'Product updated successfully',
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.href = '/admin/products';
        });
      } else {
        throw new Error('Failed to update product');
      }
    } catch (error) {
      Swal.fire({
        title: 'Error!',
        text: error.message,
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  });
</script>

<%- include('../../views/partials/admin/footer') %>
