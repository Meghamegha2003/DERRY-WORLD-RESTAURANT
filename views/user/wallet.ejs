<%- include('../partials/user/header-no-bg.ejs', { user: user, cartCount: cartCount, title: title }) %>

<div class="wallet-page">
    <div class="container my-5" style="max-width: 1200px;">
        <div class="row">
            <div class="col-lg-10 mx-auto">
                <% if (typeof error !== 'undefined' && error) { %>
                    <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        <%= error %>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                <% } %>

                
                <!-- Referral Card -->
                <div class="referral-card mb-4" style="max-width: 1000px; margin: 0 auto;">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="mb-0">Refer & Earn</h5>
                                <div class="referral-icon">
                                    <i class="fas fa-gift fa-2x text-primary"></i>
                                </div>
                            </div>
                            
                            <p class="text-muted mb-3">
                                Share your referral code with friends and earn ₹<%= referral.referrerBonus %> when they join!
                                They'll get ₹<%= referral.referredBonus %> as a welcome bonus.
                            </p>
                            
                            <div class="referral-stats row g-2 mb-3">
                                <div class="col-6">
                                    <div class="stat-card p-2 rounded bg-light">
                                        <small class="text-muted d-block">Total Referrals</small>
                                        <strong><%= referral.count %></strong>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="stat-card p-2 rounded bg-light">
                                        <small class="text-muted d-block">Total Earnings</small>
                                        <strong>₹<%= referral.earnings.toFixed(2) %></strong>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="referral-code-container p-2 bg-light rounded">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <small class="text-muted d-block">Your Referral Code</small>
                                        <strong class="referral-code"><%= referral.code %></strong>
                                    </div>
                                    <button class="btn btn-outline-primary btn-sm" onclick="copyReferralCode()">
                                        <i class="fas fa-copy"></i> Copy
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Wallet Balance Card -->
                <div class="wallet-balance-card mb-4" style="max-width: 1000px; margin: 0 auto;">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="text-muted mb-1">Available Balance</h5>
                                    <h2 id="walletBalance" class="mb-0">₹<%= (wallet.balance || 0).toFixed(2) %></h2>
                                </div>
                                <div class="wallet-icon">
                                    <i class="fas fa-wallet fa-2x text-success"></i>
                                </div>
                            </div>
                            <button type="button" class="btn btn-success" onclick="openAddMoneyModal()">
                                <i class="fas fa-plus-circle me-2"></i>Add Money
                            </button>

                            <!-- Add Money Modal -->
                            <div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="addMoneyModalLabel">Add Money to Wallet</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="mb-3">
                                                <label for="amount" class="form-label">Amount (₹)</label>
                                                <input type="number" class="form-control" id="amount" min="1" step="1" required>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                            <button type="button" class="btn btn-success" onclick="initiatePayment()">Proceed to Pay</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Transactions List -->
                <div class="card shadow-sm">
                    <div class="card-header bg-white">
                        <h5 class="mb-0">Transaction History</h5>
                    </div>
                    <div class="card-body p-0">
                        <% let txList = (wallet.transactions.items || wallet.transactions || []); %>
<% if (txList.length > 0) { %>
    <div class="table-responsive">
        <table class="table table-hover mb-0 align-middle">
            <thead class="table-light">
                <tr>
                    <th style="width: 20%">Date</th>
                    <th style="width: 40%">Description</th>
                    <th style="width: 20%">Amount</th>
                    <th style="width: 20%">Status</th>
                </tr>
            </thead>
            <tbody>
                <% txList.forEach(transaction => { %>
                                            <tr>
                                                <td><%= transaction?.date ? new Date(transaction.date).toLocaleDateString('en-IN', { 
                                                    day: 'numeric', 
                                                    month: 'short',
                                                    year: 'numeric'
                                                }) : '-' %></td>
                                                <td>
                                                    <% 
                                                        let description = transaction?.description || '';
                                                        const orderNumber = transaction?.orderId || transaction?.orderReference;
                                                        
                                                        if (orderNumber) {
                                                            // Format order ID to match orders page (last 8 characters in uppercase)
                                                            const formattedOrderId = orderNumber.toString().slice(-8).toUpperCase();
                                                            if (description.toLowerCase().includes('cancelled') || description.toLowerCase().includes('cancel')) {
                                                                description = `Order #${formattedOrderId} Cancelled`;
                                                            } else if (description.toLowerCase().includes('order') && description.toLowerCase().includes('refund')) {
                                                                // Only format if it's not already a detailed refund message
                                                                if (!description.toLowerCase().startsWith('refund for')) {
                                                                    description = `Refund for order #${formattedOrderId}`;
                                                                }
                                                            } else if (description.toLowerCase().includes('order')) {
                                                                description = `Payment for order #${formattedOrderId}`;
                                                            } else {
                                                                description = `Order #${formattedOrderId}`;
                                                            }
                                                        }
                                                    %>
                                                    <%= description || '-' %>
                                                </td>
                                                <% 
                                                    // Determine transaction type first
                                                    const isCredit = transaction.type === 'credit' || 
                                                                  transaction.type === 'refund' || 
                                                                  (transaction.description && (
                                                                    transaction.description.toLowerCase().includes('add') ||
                                                                    transaction.description.toLowerCase().includes('refund') ||
                                                                    transaction.description.toLowerCase().includes('bonus')
                                                                  ));
                                                    
                                                    const isDebit = !isCredit && transaction.type !== 'refund';
                                                    
                                                    // Check if this is a refund transaction
                                                    const isRefundTransaction = transaction.type === 'refund' || (isCredit && (
                                                        transaction.description && (
                                                            transaction.description.toLowerCase().includes('refund') ||
                                                            transaction.description.toLowerCase().includes('cancelled') ||
                                                            transaction.description.toLowerCase().includes('returned')
                                                        )
                                                    ));
                                                    
                                                    
                                                    // Get the original amount (before any discounts)
                                                    const originalAmount = transaction.originalAmount || transaction.amount || 0;
                                                    
                                                    // Calculate final amount - for refunds, amount is already final
                                                    let finalAmount;
                                                    if (isRefundTransaction) {
                                                        // For refunds, transaction.amount is already the net refunded amount
                                                        finalAmount = transaction.amount || 0;
                                                    } else {
                                                        // For regular transactions, apply discounts
                                                        finalAmount = transaction.finalAmount || 
                                                                    (transaction.amount || 0) - 
                                                                    (transaction.offerDiscount || 0) - 
                                                                    (transaction.couponDiscount || 0);
                                                    }
                                                    
                                                    const showOriginalAmount = (transaction.offerDiscount > 0 || transaction.couponDiscount > 0) && isDebit;
                                                %>
                                                <td class="<%= isCredit ? 'text-success' : 'text-danger' %>">
                                                    <% if (isRefundTransaction && transaction.originalAmount && transaction.originalAmount > 0) { %>
                                                        <!-- Refund transaction with breakdown -->
                                                        <div class="refund-breakdown">
                                                            <div class="fw-bold">
                                                                <%= isCredit ? '+' : '' %>₹<%= Math.abs(finalAmount).toFixed(2) %>
                                                            </div>
                                                            <div class="small text-muted mt-1">
                                                                <div class="d-flex justify-content-between">
                                                                    <span>Item Amount:</span>
                                                                    <span>₹<%= transaction.originalAmount.toFixed(2) %></span>
                                                                </div>
                                                                <% if (transaction.couponDiscount > 0) { %>
                                                                    <div class="d-flex justify-content-between text-primary">
                                                                        <span>Coupon Deduction (<%= transaction.couponRatio ? transaction.couponRatio.toFixed(1) + '%' : '' %>):</span>
                                                                        <span>-₹<%= transaction.couponDiscount.toFixed(2) %></span>
                                                                    </div>
                                                                <% } %>
                                                                <% if (transaction.offerDiscount > 0) { %>
                                                                    <div class="d-flex justify-content-between text-success">
                                                                        <span>Offer Discount:</span>
                                                                        <span>-₹<%= transaction.offerDiscount.toFixed(2) %></span>
                                                                    </div>
                                                                <% } %>
                                                                <hr class="my-1">
                                                                <div class="d-flex justify-content-between fw-bold">
                                                                    <span>Total Refunded:</span>
                                                                    <span>₹<%= Math.abs(finalAmount).toFixed(2) %></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    <% } else { %>
                                                        <!-- Regular transaction display -->
                                                        <% if (showOriginalAmount) { %>
                                                            <div class="text-muted text-decoration-line-through small">
                                                                ₹<%= originalAmount.toFixed(2) %>
                                                            </div>
                                                        <% } %>
                                                        <%= isCredit ? '+' : isDebit ? '-' : '' %>₹<%= Math.abs(finalAmount).toFixed(2) %>
                                                        
                                                        <% if (transaction.offerDiscount > 0) { %>
                                                            <div class="text-success small">
                                                                <i class="fas fa-tag me-1"></i>Offer: -₹<%= transaction.offerDiscount.toFixed(2) %>
                                                            </div>
                                                        <% } %>
                                                        
                                                        <% if (transaction.couponDiscount > 0) { %>
                                                            <div class="text-primary small">
                                                                <i class="fas fa-ticket-alt me-1"></i>Coupon: -₹<%= transaction.couponDiscount.toFixed(2) %>
                                                            </div>
                                                        <% } %>
                                                    <% } %>
                                                </td>
                                                <td>
                                                    <span class="badge <%= transaction?.status === 'completed' ? 'bg-success' : (transaction?.status === 'pending' ? 'bg-warning' : 'bg-danger') %>">
                                                        <%= transaction?.status?.charAt(0).toUpperCase() + transaction?.status?.slice(1) || 'Unknown' %>
                                                    </span>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    </tbody>
                                </table>

                                <!-- Pagination with Ellipsis -->
                                <% if (wallet.transactions.totalPages > 1) { %>
                                    <% 
                                        const totalPages = wallet.transactions.totalPages;
                                        const currentPage = wallet.transactions.currentPage;
                                        const maxVisiblePages = 3; // Maximum number of page links to show
                                        let startPage, endPage;
                                        
                                        if (totalPages <= maxVisiblePages) {
                                            // Show all pages if total pages are less than max visible
                                            startPage = 1;
                                            endPage = totalPages;
                                        } else {
                                            // Calculate start and end pages
                                            const maxPagesBeforeCurrent = Math.floor(maxVisiblePages / 2);
                                            const maxPagesAfterCurrent = Math.ceil(maxVisiblePages / 2) - 1;
                                            
                                            if (currentPage <= maxPagesBeforeCurrent) {
                                                // Near the beginning
                                                startPage = 1;
                                                endPage = maxVisiblePages;
                                            } else if (currentPage + maxPagesAfterCurrent >= totalPages) {
                                                // Near the end
                                                startPage = totalPages - maxVisiblePages + 1;
                                                endPage = totalPages;
                                            } else {
                                                // Somewhere in the middle
                                                startPage = currentPage - maxPagesBeforeCurrent;
                                                endPage = currentPage + maxPagesAfterCurrent;
                                            }
                                        }
                                    %>
                                    
                                    <nav aria-label="Transaction history pagination" class="d-flex justify-content-center my-4">
                                        <ul class="pagination pagination-sm">
                                            <!-- Previous Page Link -->
                                            <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                                <a class="page-link" href="<%= currentPage === 1 ? '#' : `/wallet?page=${currentPage - 1}` %>" aria-label="Previous">
                                                    <i class="fas fa-chevron-left"></i>
                                                </a>
                                            </li>
                                            
                                            <!-- First Page -->
                                            <% if (startPage > 1) { %>
                                                <li class="page-item">
                                                    <a class="page-link" href="/wallet?page=1">1</a>
                                                </li>
                                                <% if (startPage > 2) { %>
                                                    <li class="page-item disabled">
                                                        <span class="page-link">...</span>
                                                    </li>
                                                <% } %>
                                            <% } %>
                                            
                                            <!-- Page Numbers -->
                                            <% for (let i = startPage; i <= endPage; i++) { %>
                                                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                                    <a class="page-link" href="/wallet?page=<%= i %>"><%= i %></a>
                                                </li>
                                            <% } %>
                                            
                                            <!-- Last Page -->
                                            <% if (endPage < totalPages) { %>
                                                <% if (endPage < totalPages - 1) { %>
                                                    <li class="page-item disabled">
                                                        <span class="page-link">...</span>
                                                    </li>
                                                <% } %>
                                                <li class="page-item">
                                                    <a class="page-link" href="/wallet?page=<%= totalPages %>"><%= totalPages %></a>
                                                </li>
                                            <% } %>
                                            
                                            <!-- Next Page Link -->
                                            <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                                <a class="page-link" href="<%= currentPage === totalPages ? '#' : `/wallet?page=${currentPage + 1}` %>" aria-label="Next">
                                                    <i class="fas fa-chevron-right"></i>
                                                </a>
                                            </li>
                                        </ul>
                                    </nav>
                                <% } %>
                            </div>
                        <% } else { %>
                            <div class="text-center py-5">
                                <div class="mb-3">
                                    <i class="fas fa-history fa-3x text-muted"></i>
                                </div>
                                <h5 class="text-muted">No transactions yet</h5>
                                <p class="text-muted mb-0">Your transaction history will appear here</p>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Load Razorpay script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
    // Initialize modal
    let addMoneyModal;
    
    document.addEventListener('DOMContentLoaded', function() {
        addMoneyModal = new bootstrap.Modal(document.getElementById('addMoneyModal'));
    });

    function openAddMoneyModal() {
        if (addMoneyModal) {
            addMoneyModal.show();
        } else {
            addMoneyModal = new bootstrap.Modal(document.getElementById('addMoneyModal'));
            addMoneyModal.show();
        }
    }

    async function initiatePayment() {
        const amount = document.getElementById('amount').value;
        if (!amount || amount < 1) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please enter a valid amount'
            });
            return;
        }

        // Close the modal if it's open
        if (addMoneyModal) {
            addMoneyModal.hide();
        }

        // Make API call to create Razorpay order
        const response = await fetch('/wallet/add-money', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ amount })
        });

        const data = await response.json();
        if (!data.success) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to initialize payment'
            });
            return;
        }

        const options = {
            key: '<%= process.env.RAZORPAY_KEY_ID %>', // Use the key from environment variables
            amount: data.order.amount,
            currency: data.order.currency,
            name: 'Derry World',
            description: 'Add money to wallet',
            order_id: data.order.id,
            handler: async function(response) {
                // Verify payment
                const verifyResponse = await fetch('/wallet/verify-payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature,
                        amount: amount  // Include the amount in the verification request
                    })
                });

                const verifyData = await verifyResponse.json();
                if (verifyData.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Payment Successful',
                        text: 'Money has been added to your wallet',
                        showConfirmButton: false,
                        timer: 2000
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Verification Failed',
                        text: verifyData.message || 'Failed to verify payment. Please contact support if money was deducted.'
                    });
                }
            },
            prefill: {
                name: '<%= user.name %>',
                email: '<%= user.email %>',
                contact: '<%= user.phone %>'
            },
            theme: {
                color: '#28a745'
            }
        };

        // Check if Razorpay key is available
        if (!options.key) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Payment system is not properly configured'
            });
            return;
        }

        const razorpayInstance = new Razorpay(options);
        razorpayInstance.open();
        
        // Hide the modal after opening Razorpay
        if (addMoneyModal) {
            addMoneyModal.hide();
        }
    }

    // Clear amount input when modal is hidden
    document.getElementById('addMoneyModal').addEventListener('hidden.bs.modal', function () {
        document.getElementById('amount').value = '';
    });
</script>

<style>
    .wallet-page {
        background-color: #f8f9fa;
        min-height: 100vh;
        padding: 2rem 0;
    }

    .container {
        max-width: 1200px;
    }

    .wallet-balance-card {
        transition: transform 0.2s;
        max-width: 1000px;
        margin: 0 auto;
    }

    .wallet-icon {
        background-color: #e8f5e9;
        padding: 1rem;
        border-radius: 50%;
    }

    /* Pagination Styles */
    .pagination {
        margin: 1.5rem 0;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }

    .pagination .page-item {
        margin: 0 0.2rem;
    }

    .pagination .page-link {
        color: #4a5568;
        background: #fff;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        min-width: 3.25rem;
        height: 2.75rem;
        padding: 0 0.75rem;
        margin: 0 0.3rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);
    }

    .pagination .page-link:hover {
        background-color: #f7fafc;
        border-color: #cbd5e0;
        color: #2d3748;
        transform: translateY(-1px);
    }

    .pagination .page-item.active .page-link {
        background-color: #4299e1;
        border-color: #4299e1;
        color: white;
        font-weight: 600;
        box-shadow: 0 1px 3px 0 rgba(66, 153, 225, 0.5);
    }

    .pagination .page-item.active .page-link:hover {
        background-color: #3182ce;
        border-color: #3182ce;
    }

    .pagination .page-item.disabled .page-link {
        color: #a0aec0;
        background-color: #f7fafc;
        border-color: #e2e8f0;
        cursor: not-allowed;
        opacity: 0.7;
    }

    .pagination .page-item .page-link i {
        font-size: 0.75rem;
    }

    /* Ellipsis styling */
    .pagination .page-item.disabled .page-link {
        border: none;
        background: transparent;
        font-size: 1.25rem;
        line-height: 1;
        padding-top: 0.5rem;
        box-shadow: none;
    }

    @media (max-width: 768px) {
        .pagination {
            flex-wrap: wrap;
        }

        .page-item {
            margin: 2px;
        }
    }
    .referral-card {
        transition: transform 0.2s;
        max-width: 1000px;
        margin: 0 auto;
    }

    .referral-icon {
        background-color: #e3f2fd;
        padding: 1rem;
        border-radius: 50%;
    }

    .stat-card {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        transition: all 0.2s;
    }

    .stat-card:hover {
        background-color: #e9ecef;
    }

    .referral-code {
        font-family: monospace;
        font-size: 1.2rem;
        letter-spacing: 1px;
    }

    .referral-code-container {
        border: 1px dashed #dee2e6;
    }

    .table {
        font-size: 0.95rem;
    }

    .table th {
        font-weight: 600;
        color: #495057;
    }

    .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
    }

    .table-responsive {
        border-radius: 0.25rem;
        box-shadow: 0 0 10px rgba(0,0,0,0.05);
    }
</style>

<script>
function copyReferralCode() {
    const code = '<%= referral.code %>';
    navigator.clipboard.writeText(code).then(() => {
        Swal.fire({
            toast: true,
            position: 'top',
            icon: 'success',
            title: 'Referral code copied!',
            showConfirmButton: false,
            timer: 2000
        });
    }).catch(() => {
        Swal.fire({
            toast: true,
            position: 'top',
            icon: 'error',
            title: 'Failed to copy code',
            showConfirmButton: false,
            timer: 2000
        });
    });
}
</script>

<%- include('../partials/user/footer.ejs') %>